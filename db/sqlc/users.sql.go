// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  full_name,
  email,
  password,
  contact,
  dog,
  address,
  city,
  post_code,
  longitude,
  latitude
) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11 ) RETURNING id, full_name, email, password, contact, dog, address, city, post_code, longitude, latitude, created_at
`

type CreateUserParams struct {
	ID        uuid.UUID     `json:"id"`
	FullName  string        `json:"full_name"`
	Email     string        `json:"email"`
	Password  string        `json:"password"`
	Contact   string        `json:"contact"`
	Dog       sql.NullInt32 `json:"dog"`
	Address   string        `json:"address"`
	City      string        `json:"city"`
	PostCode  string        `json:"post_code"`
	Longitude string        `json:"longitude"`
	Latitude  string        `json:"latitude"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.Contact,
		arg.Dog,
		arg.Address,
		arg.City,
		arg.PostCode,
		arg.Longitude,
		arg.Latitude,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.Contact,
		&i.Dog,
		&i.Address,
		&i.City,
		&i.PostCode,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, email, password, contact, dog, address, city, post_code, longitude, latitude, created_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.Contact,
		&i.Dog,
		&i.Address,
		&i.City,
		&i.PostCode,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, full_name, email, password, contact, dog, address, city, post_code, longitude, latitude, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.Contact,
		&i.Dog,
		&i.Address,
		&i.City,
		&i.PostCode,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
	)
	return i, err
}

const getWalkers = `-- name: GetWalkers :many
SELECT id, full_name, email, password, contact, dog, address, city, post_code, longitude, latitude, created_at FROM users ORDER BY name
`

func (q *Queries) GetWalkers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getWalkers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Password,
			&i.Contact,
			&i.Dog,
			&i.Address,
			&i.City,
			&i.PostCode,
			&i.Longitude,
			&i.Latitude,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
contact=$2,
address=$3,
city=$4,
post_code=$5,
dog=$6
WHERE id = $1
RETURNING id, full_name, email, password, contact, dog, address, city, post_code, longitude, latitude, created_at
`

type UpdateUserParams struct {
	ID       uuid.UUID     `json:"id"`
	Contact  string        `json:"contact"`
	Address  string        `json:"address"`
	City     string        `json:"city"`
	PostCode string        `json:"post_code"`
	Dog      sql.NullInt32 `json:"dog"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Contact,
		arg.Address,
		arg.City,
		arg.PostCode,
		arg.Dog,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.Contact,
		&i.Dog,
		&i.Address,
		&i.City,
		&i.PostCode,
		&i.Longitude,
		&i.Latitude,
		&i.CreatedAt,
	)
	return i, err
}
